// Resolvely database schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "postgresql", "mysql", etc. based on your choice
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?

  accounts      Account[]

  assignedTickets Ticket[] @relation("AssignedTickets") // Tickets assigned to this user
  createdTickets  Ticket[] @relation("CreatedTickets") // Every ticket this user created
  createdComments Comment[] // Comments created by this user

  role Role @default(USER) // Default role for a user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  AGENT
  ADMIN
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String? // For longer descriptions
  status      TicketStatus @relation(fields: [statusId], references: [id])
  statusId    String // Foreign key for TicketStatus

  priority      TicketPriority @relation(fields: [priorityId], references: [id])
  priorityId    String // Foreign key for TicketPriority

  category    String? // Example: "Bug", "Feature Request", "Question" - You can make this an Enum or separate model later if needed

  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull) // Assigned agent
  assignedToId String? // Foreign key for User (assigned agent)

  createdBy   User?  @relation("CreatedTickets", fields: [createdById], references: [id])// Implicitly linked via authentication context when creating, but you could explicitly track if needed
  createdById String?

  comments    Comment[] // Related comments for this ticket

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketStatus {
  id    String @id @default(cuid())
  name  String @unique // e.g., "Open", "In Progress", "Resolved"
  tickets Ticket[] // Tickets with this status

  @@map("TicketStatuses") // Optional: Map table name if you prefer a different name in the database
}

model TicketPriority {
  id    String @id @default(cuid())
  name  String @unique // e.g., "High", "Medium", "Low"
  tickets Ticket[] // Tickets with this priority

  @@map("TicketPriorities") // Optional: Map table name
}

model Comment {
  id        String   @id @default(cuid())
  content   String 
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String   // Foreign key for Ticket
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   // Foreign key for User (comment author)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Comments") // Optional: Map table name
}